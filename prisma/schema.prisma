// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with authentication and profile information
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Authentication
  accounts      Account[]
  sessions      Session[]

  // User content
  documents     Document[]
  files         File[]
  comments      Comment[]
  shares        Share[]
  organizations OrganizationMember[]
  subscriptions Subscription[]

  // User preferences
  preferences   UserPreferences?

  // Back-relations
  documentCollaborations DocumentCollaborator[]

  @@map("users")
}

// NextAuth.js integration models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Document management system
model Document {
  id          String   @id @default(cuid())
  title       String
  content     String?  @db.Text
  status      DocumentStatus @default(draft)
  visibility  Visibility @default(private)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  // Relationships
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  
  collaborators DocumentCollaborator[]
  comments      Comment[]
  versions      DocumentVersion[]
  tags          Tag[]

  // Document metadata
  wordCount    Int      @default(0)
  readingTime  Int      @default(0) // in minutes
  lastEditedBy String?
  lastEditedAt DateTime?

  @@map("documents")
}

model DocumentVersion {
  id          String   @id @default(cuid())
  version     Int
  content     String   @db.Text
  changes     String?  @db.Text // JSON string of changes
  createdAt   DateTime @default(now())
  createdBy   String
  
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, version])
  @@map("document_versions")
}

model DocumentCollaborator {
  id           String   @id @default(cuid())
  documentId   String
  userId       String
  role         CollaborationRole @default(viewer)
  joinedAt     DateTime @default(now())
  
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
  @@map("document_collaborators")
}

// File management system
model File {
  id          String   @id @default(cuid())
  name        String
  originalName String
  mimeType    String
  size        Int
  path        String
  url         String?
  thumbnail   String?
  
  // File metadata
  uploadedAt  DateTime @default(now())
  uploadedBy  String
  lastAccessed DateTime?
  accessCount Int      @default(0)
  
  // File processing
  processingStatus ProcessingStatus @default(pending)
  processingError String?
  metadata    String? @db.Text // JSON string of file metadata
  
  // Relationships
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  
  tags        Tag[]

  @@map("files")
}

// Organization and team management
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Organization settings
  settings   String? @db.Text // JSON string of org settings
  
  // Relationships
  members    OrganizationMember[]
  documents  Document[]
  files      File[]
  shares     Share[]

  @@map("organizations")
}

model OrganizationMember {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationRole @default(member)
  joinedAt       DateTime @default(now())
  
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

// Sharing and permissions system
model Share {
  id          String   @id @default(cuid())
  type        ShareType
  resourceId  String   // ID of document, file, or folder
  resourceType ResourceType
  accessLevel AccessLevel @default(view)
  
  // Sharing settings
  password   String?
  expiresAt  DateTime?
  maxViews   Int?
  viewCount  Int       @default(0)
  
  // Share metadata
  createdAt  DateTime @default(now())
  createdBy  String
  isActive   Boolean  @default(true)
  
  // Relationships
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  @@map("shares")
}

// Comment and collaboration system
model Comment {
  id          String   @id @default(cuid())
  content     String   @db.Text
  position    String?  // JSON string of position in document
  resolved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  parentId    String?
  parent      Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")
  
  mentions    String[] // Array of user IDs mentioned

  @@map("comments")
}

// Tagging system
model Tag {
  id          String   @id @default(cuid())
  name        String
  color       String?
  createdAt   DateTime @default(now())
  
  // Relationships
  documents   Document[]
  files       File[]

  @@unique([name])
  @@map("tags")
}

// Subscription and billing system
model Subscription {
  id          String   @id @default(cuid())
  userId      String
  plan        String   // free, pro, team, enterprise
  status      SubscriptionStatus @default(active)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd Boolean @default(false)
  canceledAt DateTime?
  
  // Billing information
  stripeCustomerId String?
  stripeSubscriptionId String?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// User preferences and settings
model UserPreferences {
  id          String   @id @default(cuid())
  userId      String   @unique
  theme       String   @default("light")
  language    String   @default("en")
  timezone    String?
  notifications String? @db.Text // JSON string of notification preferences
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// Analytics and tracking
model AnalyticsEvent {
  id          String   @id @default(cuid())
  userId      String?
  event       String
  category    String?
  metadata    String? @db.Text // JSON string of event metadata
  timestamp   DateTime @default(now())
  userAgent   String?
  ipAddress   String?
  
  @@map("analytics_events")
}

// Enums
enum DocumentStatus {
  draft
  published
  archived
  deleted
}

enum Visibility {
  private
  public
  organization
}

enum CollaborationRole {
  viewer
  commenter
  editor
  admin
}

enum OrganizationRole {
  member
  moderator
  admin
  owner
}

enum ProcessingStatus {
  pending
  processing
  completed
  failed
}

enum ShareType {
  link
  email
  user
  organization
}

enum ResourceType {
  document
  file
  folder
}

enum AccessLevel {
  view
  comment
  edit
  admin
}

enum SubscriptionStatus {
  active
  canceled
  past_due
  unpaid
  incomplete
}
